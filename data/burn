#!/bin/bash

# Define version information
VERSION="0.0.2"
RELEASE_TYPE="Alpha"

# Ensure burn is not run as root (unless --allow-root is used)
if [ "$EUID" -eq 0 ]; then
    if [ "$1" == "--allow-root" ]; then
        echo "Warning: Running burn as root."
        shift  # Remove --allow-root from arguments
    else
        echo "Error: burn should not be run as root. If you really need to use burn with root, pass the \"--allow-root\" argument (Not Recommended)"
        exit 1
    fi
fi

# Define directories
BURN_DIR="$HOME/.burn"
DOWNLOAD_DIR="$BURN_DIR/downloads"
ALIAS_FILE="$BURN_DIR/aliases"
HOLD_FILE="$BURN_DIR/hold"
POST_UPDATE_DIR="$BURN_DIR/post-update-scripts"

mkdir -p "$DOWNLOAD_DIR"
mkdir -p "$BURN_DIR/alias"
mkdir -p "$POST_UPDATE_DIR"
touch "$ALIAS_FILE"
touch "$HOLD_FILE"

# Display version info at startup
echo "burn Git Source Package Manager (Version $RELEASE_TYPE $VERSION)"

# Handle help requests first before any other processing
if [[ "$1" == "-h" || "$1" == "-help" || "$1" == "?" ]]; then
    echo " Usage:"
    echo "  burn <git-url> - Clone and alias a Git repository"
    echo "  burn alias <name> <git-url> - Set a shortcut alias for a repo"
    echo "  burn remove <name> - Delete a package and its alias"
    echo "  burn present <name> - Check if a package is downloaded"
    echo "  burn update [--verbose] - Update all packages"
    echo "  burn hold <package> - Prevent updates for a package"
    echo "  burn unhold <package> - Allow updates again"
    echo "  burn show alias | downloads | held - View stored package information"
    echo "  burn hash <algorithm> <package> - Compute hash (sha512, sha256, md5) of package files"
    exit 0  # Ensure burn exits immediately after displaying help
fi

# Handle default execution with no arguments
if [ -z "$1" ]; then
    echo "No arguments, -h for help"
    exit 1
fi

# Enable debug mode if '--debug' is the first argument
if [ "$1" == "--debug" ]; then
    shift  # Remove '--debug' from args
    echo "Running burn in debug mode..."
    exec bash -x "$0" "$@"
    exit 0
fi

# Handle alias resolution before cloning
ALIAS_URL=$(grep "^$1=" "$ALIAS_FILE" | cut -d '=' -f2)
if [ -n "$ALIAS_URL" ]; then
    URL="$ALIAS_URL"
else
    URL="$1"
fi

# Handle direct Git URL cloning with auto-alias support
if [[ "$URL" =~ ^https:// ]]; then
    REPO_NAME=$(basename "$URL" .git)
    TARGET_DIR="$DOWNLOAD_DIR/$REPO_NAME"

    if [ -d "$TARGET_DIR/.git" ]; then
        echo "$REPO_NAME already exists in $TARGET_DIR"
    else
        echo "Cloning $REPO_NAME..."
        git clone "$URL" "$TARGET_DIR"
        echo "$REPO_NAME=$URL" >> "$ALIAS_FILE"  # Auto-alias registration
        echo "Alias set: $REPO_NAME → $URL"
    fi

    exit 0
fi

FILE_NAME=$(basename "$URL")
REPO_NAME=$(echo "$FILE_NAME" | sed -E 's/\.git//g')
TARGET_DIR="$DOWNLOAD_DIR/$REPO_NAME"

# Handle 'burn present'
if [ "$1" == "present" ]; then
    if [ -d "$TARGET_DIR" ]; then
        echo "Downloaded at $TARGET_DIR/"
    else
        echo "Nein"
    fi
    exit 0
fi

# Handle 'burn remove' with proper package name parsing
if [ "$1" == "remove" ] && [ -n "$2" ]; then
    REPO_NAME="$2"
    TARGET_DIR="$DOWNLOAD_DIR/$REPO_NAME"

    if [ -d "$TARGET_DIR" ]; then
        rm -rf "$TARGET_DIR"
        sed -i "/^$REPO_NAME=/d" "$ALIAS_FILE"
        echo "Removed: $TARGET_DIR/ and cleaned up alias for '$REPO_NAME'"
    else
        echo "Error: Package '$REPO_NAME' not found."
    fi
    exit 0
fi

# Handle alias creation
if [ "$1" == "alias" ] && [ -n "$2" ] && [ -n "$3" ]; then
    echo "$2=$3" >> "$ALIAS_FILE"
    echo "Alias set: $2 → $3"
    exit 0
fi

# Handle alias renaming
if [ "$1" == "realias" ] && [ -n "$2" ] && [ -n "$3" ]; then
    ALIAS_URL=$(grep "^$2=" "$ALIAS_FILE" | cut -d '=' -f2)
    if [ -z "$ALIAS_URL" ]; then
        echo "Error: Alias '$2' does not exist."
        exit 1
    fi
    if grep -q "^$3=" "$ALIAS_FILE"; then
        echo "Error: Alias '$3' already exists."
        exit 1
    fi
    sed -i "s/^$2=.*$/$3=$ALIAS_URL/" "$ALIAS_FILE"
    echo "Alias renamed: $2 → $3"
    exit 0
fi

# Handle alias removal
if [ "$1" == "unalias" ] && [ -n "$2" ]; then
    sed -i "/^$2=/d" "$ALIAS_FILE"
    echo "Alias removed: $2"
    exit 0
fi

# Handle 'burn show'
if [ "$1" == "show" ]; then
    case "$2" in
        "alias")
            [ -s "$ALIAS_FILE" ] && cat "$ALIAS_FILE" || echo "No aliases set."
            ;;
        "downloads")
            ls "$DOWNLOAD_DIR" || echo "No downloads found."
            ;;
        "held")
            [ -s "$HOLD_FILE" ] && cat "$HOLD_FILE" || echo "No packages are currently held."
            ;;
        *)
            echo "Error: Invalid argument for 'burn show'. Use 'alias', 'downloads', or 'held'."
            ;;
    esac
    exit 0
fi

# Handle 'burn hash' command
if [ "$1" == "hash" ] && [ -n "$2" ] && [ -n "$3" ]; then
    ALGO="$2"
    REPO_NAME="$3"
    TARGET_DIR="$DOWNLOAD_DIR/$REPO_NAME"

    if [ ! -d "$TARGET_DIR" ]; then
        echo "Error: Package '$REPO_NAME' not found."
        exit 1
    fi

    echo "Computing $ALGO hash for '$REPO_NAME'..."
    find "$TARGET_DIR" -type f -exec $ALGO\sum {} + | tee "$TARGET_DIR/.burnhash"
    exit 0
fi

# Handle unknown arguments
echo "Unknown Argument: '$1'"
echo ""
echo " Usage:"
echo "  burn <git-url> - Clone and alias a Git repository"
echo "  burn alias <name> <git-url> - Set a shortcut alias for a repo"
echo "  burn remove <name> - Delete a package and its alias"
echo "  burn present <name> - Check if a package is downloaded"
echo "  burn update [--verbose] - Update all packages"
echo "  burn hold <package> - Prevent updates for a package"
echo "  burn unhold <package> - Allow updates again"
echo "  burn show alias | downloads | held - View stored package information"
echo "  burn hash <algorithm> <package> - Compute hash (sha512, sha256, md5) of package files"

exit 1
